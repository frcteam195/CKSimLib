plugins {
  id 'cpp'
  id 'java'
  id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
  id 'edu.wpi.first.NativeUtils' version '2020.5.2'
  id 'edu.wpi.first.GradleJni' version '0.10.1'
  id 'edu.wpi.first.GradleVsCode' version '0.10.0'
  id 'google-test-test-suite'
}

tasks.whenTaskAdded {task ->
    if(task.name.contains("linkCKSimDriverDebugSharedLibrary")) {
        task.enabled = false
    }
    if(task.name.contains("checkCKSimDriverDebugSharedLibraryJniSymbols")) {
        task.enabled = false
    }
    if(task.name.contains("linkCKSimDebugSharedLibrary")) {
        task.enabled = false
    }
    if(task.name.contains("linkCKSimTestDebugGoogleTestExe")) {
        task.enabled = false
    }
    if(task.name.contains("runCKSimTestDebugGoogleTestExe")) {
        task.enabled = false
    }
}


allprojects {
    repositories {
      mavenCentral()
    }
    if (project.hasProperty('releaseMode')) {
        wpilibRepositories.addAllReleaseRepositories(it)
    } else {
        wpilibRepositories.addAllDevelopmentRepositories(it)
    }
}


apply from: 'config.gradle'

apply from: 'dependencies.gradle'

nativeUtils {
  exportsConfigs {
      CKSim {
      }
  }
  privateExportsConfigs {
    CKSimDriver {
      exportsFile = project.file("src/main/driver/symbols.txt")
    }
  }
}

model {
  repositories {
    libs(PrebuiltLibraries) {
      libzmq {
        headers.srcDir '/lib/libzmq/include'
        // binaries.withType(SharedLibraryBinary) {
        //   sharedLibraryFile = file( projectDir.absolutePath + "/lib/libzmq/libzmq-v142-mt-s-4_3_2.lib")
        //   sharedLibraryLinkFile = file( projectDir.absolutePath + "/lib/libzmq/libzmq-v142-mt-s-4_3_2.lib")
        // }
        binaries.withType(StaticLibraryBinary) {
          staticLibraryFile = file( projectDir.absolutePath + "/lib/libzmq/libzmq-v142-md-s-4_3_3.lib")
        }
      }
      libprotobuf {
        headers.srcDir '/lib/protobuf/include'
        binaries.withType(StaticLibraryBinary) {
          staticLibraryFile = file( projectDir.absolutePath + "/lib/protobuf/libprotobuf-3.13.0.lib")
        }
      }
      WS2_32 {
        headers.srcDir 'C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um'
        binaries.withType(StaticLibraryBinary) {
            staticLibraryFile = file('C:/Program Files (x86)/Windows Kits/10/Lib/10.0.18362.0/um/x64/WS2_32.Lib')
        }
      }
      AdvAPI32 {
        headers.srcDir 'C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um'
        binaries.withType(StaticLibraryBinary) {
            staticLibraryFile = file('C:/Program Files (x86)/Windows Kits/10/Lib/10.0.18362.0/um/x64/AdvAPI32.Lib')
        }
      }
      iphlpapi {
        headers.srcDir 'C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um'
        binaries.withType(StaticLibraryBinary) {
            staticLibraryFile = file('C:/Program Files (x86)/Windows Kits/10/Lib/10.0.18362.0/um/x64/iphlpapi.lib')
        }
      }
    }
  }

  components {
    CKSim(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDirs 'src/main/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/native/include'
          }
        }
      }
      binaries.all {
        lib library: "CKSimDriver", linkage: 'shared'
        tasks.withType(CppCompile) {
          includes.from("C:\\Program Files\\Java\\jdk-11.0.8\\include")
          includes.from("C:\\Program Files\\Java\\jdk-11.0.8\\include\\win32")
        }
      }


      nativeUtils.useRequiredLibrary(it, "wpilibc_shared", "ntcore_shared", "hal_shared", "wpiutil_shared")
    }

    CKSimDriver(JniNativeLibrarySpec) {
      enableCheckTask true
      javaCompileTasks << compileJava
//      jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.roborio)
//      jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.raspbian)
      jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.windowsx64)
      sources {
        cpp {
          source {
            srcDirs 'src/main/driver/cpp'
            include '**/*.cpp', '**/*.cc'
          }
          exportedHeaders {
            srcDirs 'src/main/driver/include', 'src/main/driver/include/protobuf', 'lib/libzmq/include', 'lib/protobuf/include'
          }
        }
      }
      tasks.withType(CppCompile) {
        includes.from("C:\\Program Files\\Java\\jdk-11.0.8\\include")
        includes.from("C:\\Program Files\\Java\\jdk-11.0.8\\include\\win32")
      }
      nativeUtils.useRequiredLibrary(it, "hal_shared", "wpiutil_shared")
      binaries.all {
        lib library: "libzmq", linkage: 'static'
        lib library: "libprotobuf", linkage: 'static'
        lib library: "WS2_32", linkage: 'static'
        lib library: "AdvAPI32", linkage: 'static'
        lib library: "iphlpapi", linkage: 'static'
        tasks.withType(CppCompile) {
          // cppCompiler.args << '/MT'
        }
        // linker.args << '-lzmq'
        // linker.args << '-lws2_32'
        // project.logger.lifecycle("${linker.args}");
      }
    }
  }

  testSuites {
    CKSimTest(GoogleTestTestSuiteSpec) {
      testing $.components.CKSim
      sources.cpp {
        source {
          srcDir 'src/test/cpp'
          include '**/*.cpp'
        }
      }

      binaries.all {
        lib library: "CKSimDriver", linkage: 'shared'
      }
      nativeUtils.useRequiredLibrary(it, "wpilib_executable_shared", "googletest_static")
    }
  }

}

// javadoc {
//   options.addBooleanOption('-no-module-directories', true) 
// }

apply from: 'publish.gradle'

wrapper {
  gradleVersion = '6.0'
}
